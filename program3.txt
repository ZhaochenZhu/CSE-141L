        mov 32
        cpy D0, R7      //R7 = 32
        lw R7, R7       //R7 = DataMem[32]
        
        //requirement a
        mov 0
        cpy D0, R6      //counter(R6) = 0
        cpy D0, R5      //index(R5) = 0
while1: lw R0, R5       //R0 = DataMem[index]
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift1(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R5(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift1: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift2(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift2: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift3(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift3: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift4(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //indcounterex++
        cpy D2, R6      //R6 = counter
shift4: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        mov 0
        cpy D0, R2
        add R2, R5
        cpy D1, R2      //R2 = R5 = index
        addi R2, 1      //index++
        cpy D3, R5      //R5 = index
        cpy D3, R2      //R2 = index
        mov 32
        cpy D0, R1
        mov 6           //offset to store1
        cpy D0, R3
        beqr R2, R3     //if R2(index)==32, go to store1
        mov -38         //offset to go back to while 
        cpy D0, R3
        cpy D0, R2
        add R2, R3
        cpy D0,R3      
        beqr R1, R3     //unconditional jump to while1
store1: mov 33
        cpy D0, R3
        sw R6, R3

        //requirement b
        mov 0
        cpy D0, R6      //counter = 0
        cpy D0, R5      //index = 0
while2: lw R0, R5       //R0 = DataMem[index]
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 9           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift1(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R5(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
        mov 56          //offset to skip current iteration
        cpy D0, R3
        beqr R1, R3     //unconditional branch
shift1: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 9           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift2(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
        mov 38          //offset to skip current iteration
        cpy D0, R3
        beqr R1, R3     //unconditional branch
shift2: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 9           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift3(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
        mov 20          //offset to skip current iteration
        cpy D0, R3
        beqr R1, R3     //unconditional branch
shift3: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 9           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift4(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //indcounterex++
        cpy D2, R6      //R6 = counter
        mov 2           //offset to skip current iteration
        cpy D0, R3
        beqr R1, R3     //unconditional branch
shift4: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        mov 0
        cpy D0, R2
        add R2, R5
        cpy D1, R2      //R2 = R5 = index
        addi R2, 1      //index++
        cpy D3, R5      //R5 = index
        cpy D3, R2      //R2 = index
        mov 32
        cpy D0, R1
        mov 6           //offset to store2
        cpy D0, R3
        beqr R2, R3     //if R2(index)==32, go to store1
        mov -44         //offset to go back to while
        cpy D0, R3
        cpy D0, R2
        add R2, R3 
        cpy D0, R3      
        beqr R1, R3     //unconditional jump to while2
store2: mov 34
        cpy D0, R3
        sw R6, R3

        //requirement c
        mov 0
        cpy D0, R6      //counter = 1
        cpy R0, R5      //index = 0 
        lw R0, R5       //R0 = DataMem[0]
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift1(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R5(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift1: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift2(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift2: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift3(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift3: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift4(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //indcounterex++
        cpy D2, R6      //R6 = counter
shift4: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        mov 1
        cpy D0, R5      //R5 = index=1
while3: lw R3, R5
        lsr R3, 4       //R3 >> 4
        cpy D3, R3      //R3 = R3 >> 4
        add R0, R3      
        cpy D0, R0      //R0 = DataMem[index-1][3:0]+DataMem[index][7:4]
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift1(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R5(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift1: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift2(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift2: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift3(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift3: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 18          //offset to skip increment
        cpy D0, R3        
        mov 7
        cpy D0, R4
        beqr R1, R4
        mov -33         //only visited when branching to while3
        cpy D0, R4
        mov -33
        cpy D0, R2
        add R2, R4
        cpy D0, R4
        beqr R1, R4
        beqr R2, R3     //if R1(0)==R2, go to shift4(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //indcounterex++
        cpy D2, R6      //R6 = counter
shift4: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1        
        lw R0, R5       //R0 = DataMem[index]
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift1(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R5(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift1: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift2(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift2: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift3(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //counter++
        cpy D2, R6      //R6 = counter
shift3: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        pm R0, R7
        cpy D1, R2      //R2 = R0 pm R7
        mov 0
        cpy D0, R1      //R1 = 0 
        mov 6           //offset to skip increment
        cpy D0, R3
        beqr R2, R3     //if R1(0)==R2, go to shift4(skip increment)
        mov 0
        cpy D0, R2
        add R2, R6
        cpy D1, R2      //R2 == R6(counter)
        addi R2, 1      //indcounterex++
        cpy D2, R6      //R6 = counter
shift4: lsl R0, 1       
        cpy D3, R0      //R0 = R0 << 1
        mov 0
        cpy D0, R2
        add R2, R5
        cpy D1, R2      //R2 = R5 = index
        addi R2, 1      //index++
        cpy D3, R5      //R5 = index
        cpy D3, R2      //R2 = index
        mov 32
        cpy D0, R1
        mov 7           //offset to store3
        cpy D0, R3
        beqr R2, R3     //if R2(index)==32, go to store3
        mov -48         //offset to go back to while 
        cpy D0, R3
        mov -48 
        cpy D0, R2
        add R2, R3
        cpy D0, R3      
        beqr R1, R3     //unconditional jump to while3
store3: mov 35
        cpy D0, R3
        sw R6, R3