        move 30          //index = 30
        cpy D0 R5
        lw R0 R5        //R0 = DataMem[index]
        move 0
        cpy D1 R1
        add R1 R5
        cpy D1 R1
        addi R1 1
        cpy D2 R1
        lw R2 R1        //R2 = DataMem[index+1]
        rxor R0 R3      //R3 = s8
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lsl R3 3
        cpy D3 R3       //R3 = 0000_s8_000
        sw R3 R1        //DataMem[index-30] = 0000_s8_000
        rxor R2 R7      //R7 = A
        rxor R0 R3      //R3 = s8
        xor R3 R7       
        cpy D3 R3       //R3 = s0
        move 0
        cpy D0 R1       //R1 = 0
        move [TODO]
        cpy D1 R0       //offset to the else case
        beqr R3 R0      //if R3==0, then go to else
if      lw R0 R5
        lsr R0 4
        cpy D3 R3
        lsl R3 4
        cpy D3 R3
        lsr R2 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3      //R3 = s4
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        lsl R3 2
        cpy D3 R3
        xor R0 R3       
        cpy D3 R3 
        sw R3 R1        //DataMem[index-30] = 0000_s8_s4_00
        lw R0 R5
        lsr R0 6
        cpy D3 R3
        lsl R3 6
        cpy D3 R3
        lsl R0 4
        cpy D3 R1
        lsr R1 6
        cpy D3 R1
        lsl R1 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsr R2 6
        cpy D3 R1
        lsl R1 2
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R1 4
        cpy D3 R1
        lsr R1 6
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3      //R3 = s2
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        lsl R3 1
        cpy D3 R3
        xor R0 R3       
        cpy D3 R3 
        sw R3 R1        //DataMem[index-30] = 0000_s8_s4_s2_0
        lw R0 R5
        lsr R0 7
        cpy D3 R3
        lsl R3 7
        cpy D3 R3
        lsl R0 2
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 6
        cpy D3 R1 
        xor R1 R3
        cpy D3 R3
        lsl R0 4
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 5
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R0 6
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsr R2 7
        cpy D3 R1
        lsl R1 3
        cpy D3 R1
        xor R3 R1
        cpy D3 R3
        lsl R2 2
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 2
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R2 4
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 1
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R2 6
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        xor R0 R3       
        cpy D3 R0       //R0 = location = s8_s4_s2_s1;
        move 15
        cpy D0 R1
        move 28      //offset to loc15
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==15
        move 14
        cpy D0 R1
        move 28      //offset to loc14
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==14
        move 13
        cpy D0 R1
        move 28      //offset to loc13
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==13
        move 12
        cpy D0 R1
        move 28      //offset to loc12
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==12
        move 11
        cpy D0 R1
        move 28      //offset to loc11
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==11
        move 10
        cpy D0 R1
        move 28      //offset to loc10
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==10
        move 9
        cpy D0 R1
        move 28        //offset to loc9
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==9
        move 7
        cpy D0 R1
        move 28        //offset to loc7
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==7
        move 6
        cpy D0 R1
        move 27      //offset to loc6
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        addi R3 1
        cpy D2 R3
        beqr R0 R3      //if location==6
        move 5
        cpy D0 R1
        move 27         //offset to loc5
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==5
        move 3
        cpy D0 R1
        move 27         //offset to loc3
        cpy D0 R4
        cpy D0 R3
        add R3 R4
        cpy D1 R3
        cpy D1 R4
        add R3 R4
        cpy D1 R3
        beqr R0 R3      //if location==3
loc15   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 7
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (10000000)
        move 141      //offset to end
        cpy D0 R3
        beqr R1 R3
loc14   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 6
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (01000000)
        move 30      //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D0 R3 
        cpy D0 R4
        add R3 R4
        cpy D0 R3
        addi R3 2
        cpy D0 R3
        beqr R1 R3
loc13   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 5
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (00100000)
        move 26      //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D0 R3 
        cpy D0 R4
        add R3 R4
        cpy D0 R3
        addi R3 -1
        cpy D0 R3
        beqr R1 R3
loc12   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 4
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (00010000)
        move 28         //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D1 R3
        add R3 R4
        cpy D1 R3
        addi R3 1
        cpy D2 R3
        beqr R1 R3
loc11   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 3
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (00001000)
        move 23         //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D1 R3
        add R3 R4
        cpy D1 R3
        beqr R1 R3
loc10   lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 2
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (00000100)
        move 23        //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D1 R3
        addi R3 1
        cpy D2 R3
        beqr R1 R3
loc9    lw R0 R5
        move 1
        cpy D0 R3
        lsl R3 1
        cpy D3 R3
        xor R0 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R0 xor (00000001)
        move 18      //offset to end
        cpy D0 R3
        cpy D0 R4
        add R3 R4
        cpy D1 R3
        addi R3 1
        cpy D2 R3
        beqr R1 R3
loc7    move 1
        cpy D0 R3
        lsl R3 7
        cpy D3 R3
        xor R2 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R2 xor (10000000)
        move 27      //offset to end
        cpy D0 R3
        beqr R1 R3
loc6    move 1
        cpy D0 R3
        lsl R3 6
        cpy D3 R3
        xor R2 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R2 xor (01000000)
        move 17      //offset to end
        cpy D0 R3
        beqr R1 R3
loc5    move 1
        cpy D0 R3
        lsl R3 5
        cpy D3 R3
        xor R2 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R2 xor (00100000)
        move 7      //offset to end
        cpy D0 R3
        beqr R1 R3
loc3    move 1
        cpy D0 R3
        lsl R3 3
        cpy D3 R3
        xor R2 R3
        cpy D3 R0
        sw R0 R5        //DataMem[index] = R2 xor (00100000)
end     move 1
        cpy D0 R1
        lsl R1 6
        cpy D3 R1 
        sw R1 R5
else    lw R0 R5
        lsr R0 4
        cpy D3 R3
        lsl R3 4
        cpy D3 R3
        lsr R2 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3      //R3 = s4
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        lsl R3 2
        cpy D3 R3
        xor R0 R3       
        cpy D3 R3 
        sw R3 R1        //DataMem[index-30] = 0000_s8_s4_00
        lw R0 R5
        lsr R0 6
        cpy D3 R3
        lsl R3 6
        cpy D3 R3
        lsl R0 4
        cpy D3 R1
        lsr R1 6
        cpy D3 R1
        lsl R1 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsr R2 6
        cpy D3 R1
        lsl R1 2
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R1 4
        cpy D3 R1
        lsr R1 6
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3      //R3 = s2
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        lsl R3 1
        cpy D3 R3
        xor R0 R3       
        cpy D3 R3 
        sw R3 R1        //DataMem[index-30] = 0000_s8_s4_s2_0
        lw R0 R5
        lsr R0 7
        cpy D3 R3
        lsl R3 7
        cpy D3 R3
        lsl R0 2
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 6
        cpy D3 R1 
        xor R1 R3
        cpy D3 R3
        lsl R0 4
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 5
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R0 6
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 4
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsr R2 7
        cpy D3 R1
        lsl R1 3
        cpy D3 R1
        xor R3 R1
        cpy D3 R3
        lsl R2 2
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 2
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R2 4
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        lsl R1 1
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        lsl R2 6
        cpy D3 R1
        lsr R1 7
        cpy D3 R1
        xor R1 R3
        cpy D3 R3
        rxor R3 R3
        move -30
        cpy D0 R1
        add R1 R5       //R1 = index-30
        cpy D1 R1
        lw R0 R1
        xor R0 R3       
        cpy D3 R0       //R0 = location = s8_s4_s2_s1;
        move 0
        cpy D0 R1
        move 9          //offset to shift
        cpy D0 R3
        beq R0 R3
2_bit:  move 1
        cpy D0 R1
        lsl R1 7
        cpy D0 R1
        move -30
        cpy D0 R2
        add R2 R5
        cpy D1 R2
        sw R1 R2
shift:  lw R0 R5        //R0 = DataMem[index]
        move 0 
        cpy D0 R1
        add R1 R5
        cpy D1 R1
        addi R1 1
        cpy D2 R1
        lw R1 R1        //R1 = DataMem[index+1]
        lsr R0 5
        cpy D3 R3
        move -30
        cpy D0 R2
        add R2 R5   
        cpy D1 R6       //R6 = index-30
        lw R2 R6
        xor R2 R3
        cpy D3 R3
        sw R3 R6
        lsr R0 1
        cpy D3 R3
        lsl R3 4
        cpy D3 R3
        lsr R1 5
        cpy D3 R2 
        lsl R2 1
        cpy D3 R2
        xor R3 R2
        cpy D3 R3
        lsl R1 4
        cpy D3 R2
        lsr R2 7
        cpy D3 R2
        xor R3 R2
        cpy D3 R3
        move 1
        cpy D0 R0
        add R0 R6
        cpy D1 R0
        sw R3 R0
        move 2
        cpy D0 R0 
        add R0 R5
        cpy D1 R5
        cpy D1 R0       //index+=2
        move 30
        cpy D0 R1
        cpy D0 R2
        add R1 R2
        cpy D1 R1       //R1=60
        move 3     //offset to exit
        cpy D0 R3
        beqr R1 R3      //if index=60, exit
        move [TODO]     //offset to while
        cpy D0 R3
        beqr R1 R3
exit
